import logging
import openai
import os
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

API_TOKEN = os.getenv("BOT_TOKEN")
USER_CHAT_ID = os.getenv("USER_CHAT_ID")


logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("‚úÖ –û—Ç—á—ë—Ç"), KeyboardButton("üìπ –í–∏–¥–µ–æ"))
menu.add(KeyboardButton("üìä –ú–æ—è —Ñ–∞–∑–∞"), KeyboardButton("üìñ –í—Å–µ —Ñ–∞–∑—ã"))
menu.add(KeyboardButton("‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_reminder():
    message = (
        "üí™ –ë–æ—Å—Å, –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–ø–∏–Ω—É!\n\n"
        "üïò –°–µ–π—á–∞—Å —É—Ç—Ä–æ ‚Äî —Å–∞–º–æ–µ –≤—Ä–µ–º—è –≤–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–æ:\n"
        "‚úÖ –î—ã—Ö–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–æ–º\n‚úÖ –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞\n‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ—Ä–∞ –∏ —Ç–∞–∑–∞\n‚úÖ –†–∞—Å—Ç—è–∂–∫–∞\n\n"
        "üìπ –í–∏–¥–µ–æ: –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞\nhttps://youtube.com/playlist?list=..."
    )
    await bot.send_message(chat_id=USER_CHAT_ID, text=message)


async def send_evening_reminder():
    message = (
        "üåô –ë–æ—Å—Å, –≤–µ—á–µ—Ä ‚Äî –ø–æ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å—å —Ç–µ–ª–∞\n\n"
        "‚úÖ –û—Å–∞–Ω–∫–∞\n‚úÖ –ö–æ–ø—á–∏–∫-–±–ª–æ–∫\n‚úÖ –†–∞—Å—Ç—è–∂–∫–∞ —Ç–∞–∑–∞\n\n"
        "üìπ –í–∏–¥–µ–æ: –í–µ—á–µ—Ä–Ω—è—è —Ä—É—Ç–∏–Ω–∞ + –ö–æ–ø—á–∏–∫\nhttps://youtube.com/playlist?list=..."
    )
    await bot.send_message(chat_id=USER_CHAT_ID, text=message)


# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ë–æ—Å—Å, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è üí™\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω—É, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞—Ç—å –æ—Ç—á—ë—Ç—ã.\n\n"
        "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=menu
    )


# –í–∏–¥–µ–æ
@dp.message_handler(lambda msg: msg.text == "üìπ –í–∏–¥–µ–æ")
async def video_links(message: types.Message):
    await message.answer("üì∫ –í–∏–¥–µ–æ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º:")
    await message.answer("üïò –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞: https://youtube.com/playlist?list=...")
    await message.answer("üåô –í–µ—á–µ—Ä–Ω—è—è —Ä—É—Ç–∏–Ω–∞ + –ö–æ–ø—á–∏–∫-–±–ª–æ–∫: https://youtube.com/playlist?list=...")


# –û—Ç—á—ë—Ç
@dp.message_handler(lambda msg: msg.text == "‚úÖ –û—Ç—á—ë—Ç")
async def ask_report(message: types.Message):
    await message.answer(
        "–ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è?\n\n–û—Ç–º–µ—Ç—å, —á—Ç–æ —Å–¥–µ–ª–∞–ª:\n"
        "‚úÖ –£—Ç—Ä–æ\n‚úÖ –í–µ—á–µ—Ä\n‚úÖ –ö–æ–ø—á–∏–∫-–±–ª–æ–∫\n\n"
        "–ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –æ—Ç 1 –¥–æ 10 –∏–ª–∏ —Å–ª–æ–≤–∞–º–∏? üí¨")


# –§–∞–∑–∞
@dp.message_handler(lambda msg: msg.text == "üìä –ú–æ—è —Ñ–∞–∑–∞")
async def my_phase(message: types.Message):
    await message.answer("–°–µ–π—á–∞—Å —Ç—ã –Ω–∞ –§–∞–∑–µ 1: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –î–µ–ª–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è üí™")


# –í—Å–µ —Ñ–∞–∑—ã
@dp.message_handler(lambda msg: msg.text == "üìñ –í—Å–µ —Ñ–∞–∑—ã")
async def all_phases(message: types.Message):
    await message.answer("üß© –í—Å–µ —Ñ–∞–∑—ã:")
    await message.answer(
        "üîπ –§–∞–∑–∞ 1: –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è –∏ –¥—ã—Ö–∞–Ω–∏–µ\n"
        "- –î—ã—Ö–∞–Ω–∏–µ\n- –ö–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞\n- –ù–∞–∫–ª–æ–Ω—ã —Ç–∞–∑–∞ –ª—ë–∂–∞\n- –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–æ–ª–µ–Ω–∞\n- –°–∫—Ä—É—Ç–∫–∏\n- –ü–æ–∑–∞ —Ä–µ–±–µ–Ω–∫–∞"
    )
    await message.answer(
        "üîπ –§–∞–∑–∞ 2: –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è\n"
        "- –°—Ç–µ–Ω–∞\n- –í–∞–∫—É—É–º\n- –õ–æ–¥–æ—á–∫–∞\n- –ü–ª–∞–Ω–∫–∞\n- –ü–æ–∑–∞ –≥–æ–ª—É–±—è"
    )
    await message.answer(
        "üîπ –§–∞–∑–∞ 3: –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ\n"
        "- –ú–æ—Å—Ç–∏–∫\n- –ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞\n- –£—Å–ª–æ–∂–Ω–µ–Ω–Ω–∞—è –ª–æ–¥–æ—á–∫–∞\n- –°—Ç–æ—è—á–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n- –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–∑–∞ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏"
    )


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message_handler(lambda msg: msg.text == "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç–≤–æ–µ–º—É AI-—Ç—Ä–µ–Ω–µ—Ä—É üß†")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å –∫ OpenAI
@dp.message_handler()
async def handle_any(message: types.Message):
    now = datetime.now().strftime('%d.%m %H:%M')
    user_input = message.text
    log_msg = f"[–û–¢–ß–Å–¢] {now} ‚Äî {message.from_user.full_name}: {user_input}"
    print(log_msg)

    await message.answer("–ü—Ä–∏–Ω—è–ª, –±–æ—Å—Å ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–µ–Ω–µ—Ä—É...")

    try:
        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã AI-—Ç—Ä–µ–Ω–µ—Ä –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Ç–æ—á–Ω–æ."},
                {"role": "user", "content": user_input}
            ]
        )
        reply = response.choices[0].message.content
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞: {e}"

    await message.answer(f"üß† –¢—Ä–µ–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:\n{reply}")


if __name__ == '__main__':
    scheduler.add_job(send_reminder, 'cron', hour=8, minute=0)
    scheduler.add_job(send_evening_reminder, 'cron', hour=23, minute=0)
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
