package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/go-co-op/gocron"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	botToken   = os.Getenv("BOT_TOKEN")
	openaiKey  = os.Getenv("OPENAI_API_KEY")
	userChatID = os.Getenv("USER_CHAT_ID")
	bot        *tgbotapi.BotAPI
)

func sendReminder(text string) {
	id := int64(0)
	fmt.Sscanf(userChatID, "%d", &id)
	msg := tgbotapi.NewMessage(id, text)
	bot.Send(msg)
}

func scheduleReminders() {
	s := gocron.NewScheduler(time.UTC)
	s.Every(1).Day().At("08:00").Do(func() {
		sendReminder("üí™ –ë–æ—Å—Å, –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–ø–∏–Ω—É!\n\nüïò –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞:\n‚úÖ –î—ã—Ö–∞–Ω–∏–µ\n‚úÖ –ú–æ–±–∏–ª–∏–∑–∞—Ü–∏—è\n‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ—Ä–∞\n‚úÖ –†–∞—Å—Ç—è–∂–∫–∞\n\nüìπ –í–∏–¥–µ–æ: https://youtube.com/playlist?list=...")
	})
	s.Every(1).Day().At("23:00").Do(func() {
		sendReminder("üåô –ë–æ—Å—Å, –ø–æ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å—å —Ç–µ–ª–∞!\n\n‚úÖ –û—Å–∞–Ω–∫–∞\n‚úÖ –ö–æ–ø—á–∏–∫-–±–ª–æ–∫\n‚úÖ –†–∞—Å—Ç—è–∂–∫–∞ —Ç–∞–∑–∞\n\nüìπ –í–∏–¥–µ–æ: https://youtube.com/playlist?list=...")
	})
	s.StartAsync()
}

func askGPT(prompt string) string {
	url := "https://api.openai.com/v1/chat/completions"
	payload := map[string]interface{}{
		"model": "gpt-4",
		"messages": []map[string]string{
			{"role": "system", "content": "–¢—ã AI-—Ç—Ä–µ–Ω–µ—Ä –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
			{"role": "user", "content": prompt},
		},
	}
	data, _ := json.Marshal(payload)

	req, _ := http.NewRequest("POST", url, bytes.NewBuffer(data))
	req.Header.Add("Authorization", "Bearer "+openaiKey)
	req.Header.Add("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: " + err.Error()
	}
	defer resp.Body.Close()

	var result map[string]interface{}
	json.NewDecoder(resp.Body).Decode(&result)

	if choices, ok := result["choices"].([]interface{}); ok && len(choices) > 0 {
		msg := choices[0].(map[string]interface{})["message"].(map[string]interface{})["content"].(string)
		return msg
	}
	return "–û—Ç–≤–µ—Ç –æ—Ç AI –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω."
}

func main() {
	var err error
	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Authorized on account %s", bot.Self.UserName)

	scheduleReminders()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		text := update.Message.Text
		chatID := update.Message.Chat.ID

		switch text {
		case "/start":
			msg := "–ë–æ—Å—Å, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω—É. –í—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É:\n\nüìπ –í–∏–¥–µ–æ\n‚úÖ –û—Ç—á—ë—Ç\nüìä –ú–æ—è —Ñ–∞–∑–∞\nüìñ –í—Å–µ —Ñ–∞–∑—ã\n‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
			bot.Send(tgbotapi.NewMessage(chatID, msg))
		case "üìπ –í–∏–¥–µ–æ":
			bot.Send(tgbotapi.NewMessage(chatID, "üïò –£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞: https://youtube.com/playlist?list=..."))
			bot.Send(tgbotapi.NewMessage(chatID, "üåô –í–µ—á–µ—Ä–Ω—è—è —Ä—É—Ç–∏–Ω–∞: https://youtube.com/playlist?list=..."))
		case "üìä –ú–æ—è —Ñ–∞–∑–∞":
			bot.Send(tgbotapi.NewMessage(chatID, "–°–µ–π—á–∞—Å —Ç—ã –Ω–∞ –§–∞–∑–µ 1: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –î–µ–ª–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è üí™"))
		case "üìñ –í—Å–µ —Ñ–∞–∑—ã":
			phases := "üîπ –§–∞–∑–∞ 1: –¥—ã—Ö–∞–Ω–∏–µ, –∫–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞, —Å–∫—Ä—É—Ç–∫–∏...\nüîπ –§–∞–∑–∞ 2: –≤–∞–∫—É—É–º, –ø–ª–∞–Ω–∫–∞, –ª–æ–¥–æ—á–∫–∞...\nüîπ –§–∞–∑–∞ 3: –º–æ—Å—Ç–∏–∫, –±–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞, —Å—Ç–æ—è—á–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è..."
			bot.Send(tgbotapi.NewMessage(chatID, phases))
		case "‚úÖ –û—Ç—á—ë—Ç":
			msg := "–û—Ç–º–µ—Ç—å, —á—Ç–æ —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è:\n‚úÖ –£—Ç—Ä–æ\n‚úÖ –í–µ—á–µ—Ä\n‚úÖ –ö–æ–ø—á–∏–∫-–±–ª–æ–∫\n–ò –∫–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –æ—Ç 1 –¥–æ 10?"
			bot.Send(tgbotapi.NewMessage(chatID, msg))
		case "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
			bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ AI-—Ç—Ä–µ–Ω–µ—Ä—É."))
		default:
			reply := askGPT(text)
			bot.Send(tgbotapi.NewMessage(chatID, "üß† –¢—Ä–µ–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:\n"+reply))
		}
	}
}
